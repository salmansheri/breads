// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  userId             String      @unique
  username           String      @unique
  name               String
  imageUrl           String?
  bio                String?
  onboarded          Boolean     @default(false)
  createdCommunities Community[] @relation("CommunityCreator")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  members   Member[]
  comments  Comment[]
  replies   Reply[]

  threads Thread[]
}

model Thread {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  text        String   @db.String
  communityId String?  @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  comments Comment[]

  user      User       @relation(fields: [userId], references: [userId])
  community Community? @relation(fields: [communityId], references: [id])

  @@index([userId, communityId])
}

model Comment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  threadId    String   @db.ObjectId
  communityId String?  @db.ObjectId
  text        String   @db.String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [userId])

  thread    Thread     @relation(fields: [threadId], references: [id])
  community Community? @relation(fields: [communityId], references: [id])

  replies Reply[]
}

model Community {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  username  String   @unique
  name      String
  imageUrl  String?
  bio       String?
  threadId  String   @db.ObjectId
  memberId  String[] @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments Comment[]
  threads  Thread[]
  members  Member[]

  creator User @relation("CommunityCreator", fields: [userId], references: [userId])

  @@index([memberId])
}

model Member {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  communityId String @db.ObjectId

  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [userId])
  community Community @relation(fields: [communityId], references: [id])
}

model Reply {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String

  text      String   @db.String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [userId])
  commentId String   @db.ObjectId

  comment Comment @relation(fields: [commentId], references: [id])
}
